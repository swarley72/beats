(function () {
const items = document.querySelectorAll(".colors__link");

items.forEach(item => {
  item.addEventListener("click", function(e) {
    e.preventDefault();
    const item = this.closest(".colors__item");
    const container = this.closest(".colors__list");
    const isItemOpened = item.classList.contains("active");
    
    if (isItemOpened) {
      closeAllItems(container);
    } else {
      closeAllItems(container);
      openItem(item);
    }
  })
});

function openItem(item){
  const hiddenDesc = item.querySelector(".colors__desc");
  const textDesc = item.querySelector(".colors__desc-text")
  const width = getWidth(item);
  item.classList.add("active");
  hiddenDesc.style.width = `${width.container}px`;
  textDesc.style.width = `${width.textContainer}px`;
}


function closeAllItems(container) {
  const items = container.querySelectorAll(".colors__item")
  const contentList = container.querySelectorAll(".colors__desc")

  items.forEach(element => {
    element.classList.remove("active")
  });

  contentList.forEach(element => {
    element.style.width = "0px"
  });

}

function getWidth(item) {
  let itemWidth = 0
  const screenWidth = window.innerWidth;
  const container = item.closest(".colors__list");
  const titlesBlocks = container.querySelectorAll(".colors__link");
  const titlesWidth = titlesBlocks[0].offsetWidth * titlesBlocks.length;
  const textContainer = item.querySelector(".colors__desc-text");

  const isTablet = (screenWidth <= 768 && screenWidth > 480);
  const isMobile = screenWidth <= 480;
  
  if(isTablet) {
    itemWidth = screenWidth - titlesWidth;
  } else if (isMobile) {
    itemWidth = screenWidth - titlesBlocks[0].offsetWidth;
  } else {
    itemWidth = 500;
  }

  return {
    container: itemWidth,
    textContainer: itemWidth
  }
}
})();;(function () {
const openBtn = $(".burger");
const closeBtn = $(".fullscreen-menu__close-btn")
const fullScreenMenu = $(".fullscreen-menu");
const menuLink = $(".menu--vertical").find(".menu__item");

openBtn.click(e => {
  fullScreenMenu.css("display", "flex");
  $("body").addClass("body--scroll--lock");
});

closeBtn.click(e => {
  fullScreenMenu.css("display", "none");
  $("body").removeClass("body--scroll--lock");
});

menuLink.click(e => {
  e.preventDefault();
  fullScreenMenu.css("display", "none");
  $("body").removeClass("body--scroll--lock");
  
});
})();;(function () {
let myMap;

function init() {
  myMap = new ymaps.Map("map", {
    center: [55.76, 37.64],
    zoom: 11,
    controls: [

    ]
  });

  const coords = [
    [55.737805, 37.591579],
    [55.720057, 37.630307],
    [55.759343, 37.640231]
  ];

  const myCollection = new ymaps.GeoObjectCollection({}, {
    draggable: true,
    iconLayout: 'default#image',
    iconImageHref: "./img/icons/marker.svg",
    iconImageSize: [50, 73],
    iconImageOffset: []
  });

  coords.forEach(coord => {
    myCollection.add(new ymaps.Placemark(coord));
  })

  myMap.geoObjects.add(myCollection);
  myMap.behaviors.disable("scrollZoom")
}

ymaps.ready(init)

})();;(function () {
function validateForm(form, fieldsArray){
  fieldsArray.forEach(field => {
    field.removeClass("input-error");
    if (field.val().trim() == "") {
      field.addClass("input-error");
    }
  })

  const errorFields = form.find(".input-error");

  return errorFields.length == 0
}


$('.form').submit(e => {
  e.preventDefault();

  const form = $(e.currentTarget);
  const name = form.find("[name='name']");
  const phone = form.find("[name='phone']");
  const comment = form.find("[name='comment']");
  const to = form.find("[name='to']");

  const modal = $(".modal");
  const modalText = modal.find(".modal__text");
  modalText.removeClass('modal__text--error')

  const isValid = validateForm(form, [name, phone, comment, to])

  if (isValid) {
    const request = $.ajax({
      url: "https://webdev-api.loftschool.com/sendmail",
      method: 'post',
      data: {
        name: name.val(),
        phone: phone.val(),
        comment: comment.val(),
        to: to.val(),
      },
    });

    request.done(data => {
      modalText.text(data.message)
    });
    
    request.fail(data => {
      const message = data.responseJSON.message
      modalText.text(message)
      modalText.addClass('modal__text--error')  
    })

    request.always(() => {
      $.fancybox.open({
        src: '#modal',
        type: 'inline'
      })
    })
  }
});


$('.js-modal-button').click(e => {
  e.preventDefault();

  $.fancybox.close();
})
})();;(function () {
const sections = $("section");
const display = $(".maincontent");
const sidemenu = $(".fixed-menu");
const sidemenuItems = sidemenu.find(".fixed-menu__item")
const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();


let inScroll = false;

sections.first().addClass("active");

function countSectionPosition(sectionEq) {
  const position = sectionEq * -100;

  if (isNaN(position)) {
    console.erro("not a number")
    return 0
  }
  return position
}

function changeSidemenuColor(sectionEq) {
  const currentSection = sections.eq(sectionEq);
  const sidemenuColor = currentSection.attr("data-sidemenu-color");

  if (sidemenuColor == "white") {
    sidemenu.addClass("fixed-menu--color--white")
  } else {
    sidemenu.removeClass("fixed-menu--color--white")
  }
}

function resetActiveClassForItem(items, itemEq, activeClass) {
  items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
}

function performTransition(sectionEq) {
  if (inScroll) return
  const transitionOver = 600;
  const mouseInertionOver = 300;
  inScroll = true;

  const position = countSectionPosition(sectionEq);

  changeSidemenuColor(sectionEq);

  display.css({
    transform: `translateY(${position}%)`
  })

  resetActiveClassForItem(sections, sectionEq, "active")
  
  setTimeout(() => {
    inScroll = false;

    resetActiveClassForItem(sidemenuItems, sectionEq, "fixed-menu__item--active");

  }, transitionOver + mouseInertionOver);
}

function viewportScroller() {
  const activeSection = sections.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next() {
      if (nextSection.length) {
        performTransition(nextSection.index())
      }
    },

    prev() {
      if (prevSection.length) {
      performTransition(prevSection.index())
      }
    }
  }
}

$(window).on("wheel", e => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next()
  }
  
  if (deltaY < 0) {
    scroller.prev()
  }
})

$(window).on("keydown", e => {
  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName == "input" && tagName == "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return

  switch(e.keyCode) {
    case 38: //prev
      scroller.prev();
      break;

    case 40: //next
      scroller.next();
      break;
    }
})

$("[data-scroll-to]").click(e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-scroll-to");
  const reqSection = $(`[data-section-id=${target}]`);

  performTransition(reqSection.index());
})


if (isMobile) {
  $("body").swipe( {
    preventDefaultEvents: false,
    //Generic swipe handler for all directions
    swipe: function(event, direction) {
      const scroller = viewportScroller();
      let scrollDirection = "";
      let isVerticalScroll = false;
      if (direction == "up"){
        scrollDirection = "next";
        isVerticalScroll = true;
      } 
      if (direction == "down"){
        scrollDirection = "prev";
        isVerticalScroll = true;
      } 
      if (isVerticalScroll){
        scroller[scrollDirection]();
      }
  
    }
  });
  
  $(".wrapper").on("touchmove", e => e.preventDefault());

}
})();;(function (){
  const playerContainer = document.querySelector(".player");
  const playerWrapper = document.querySelector(".player__wrapper");
  const video = document.querySelector(".player__video");
  const playerStart = document.querySelector(".player__start");
  const playerPlayback = document.querySelector(".player__playback");
  const progressBar = document.querySelector(".player__playback-line");
  const playerVideoCircle = document.querySelector(".player__playback-button");
  const playerVolumeIcon = document.querySelector(".player__volume-icon-img");
  const playerVolumeBar = document.querySelector(".player__volume");
  const playerVolumeCircle = document.querySelector(".player__volume-button");
  const playerSplash =  document.querySelector(".player__splash");
  const redVolumeBar = document.querySelector(".player__volume-bar");

  let startVolume = 0;
  let currentVolume;


  //play/pause video

  function handlerStart() {
    if (video.paused) {
      video.play()
      playerSplash.style.display = "none"
    } else {
      video.pause()
      playerSplash.style.display = "block"
    }
  }

  playerStart.addEventListener("click", handlerStart);
  playerWrapper.addEventListener("click", handlerStart);


  //toggle play/pause icon
  video.onplay = () => {
    togglePlayer();
  }
  video.onpause = () => {
    togglePlayer("pause");
    
  }

  function togglePlayer(action = "start") {
    if (action == "start") {
      playerContainer.classList.add("player__active")
    } else {
      playerContainer.classList.remove("player__active")

    }
  }

  //volume bar
  function changeVolume(elem) {
  // const (currentTarget) = elem;
    const currentTarget = elem.currentTarget;

    const left = currentTarget.getBoundingClientRect().left;
    const soundBarWIdth = parseInt(getComputedStyle(currentTarget).width);
    const newPosition = elem.pageX - left;
    const percentValue = (newPosition / soundBarWIdth) * 100;
    const circleWidth = parseInt(getComputedStyle(playerVolumeCircle).width)

    video.volume = percentValue / 100;
    playerVolumeCircle.style.left = `${percentValue}%`;
    redVolumeBar.style.width = `${percentValue - circleWidth}%`;
  }

  function toggleSound() {
    playerVolumeIcon.classList.toggle("muted")
    
    const redVolumeBar = document.querySelector(".player__volume-bar");
    if (video.volume == 0) {
      video.volume = currentVolume;
      playerVolumeCircle.style.left = `${currentVolume * 100}%`
      redVolumeBar.style.width = `${currentVolume * 100}%`
      
    } else {
      currentVolume = video.volume;
      video.volume = startVolume;
      playerVolumeCircle.style.left = `${startVolume}%`
      redVolumeBar.style.width = `${startVolume}%`
    }
  }

  playerVolumeBar.addEventListener("click", changeVolume);
  playerVolumeIcon.addEventListener("click", toggleSound);


  //video 

  function handleDuration(e) {
    const barSize = parseInt(getComputedStyle(playerPlayback).width);
    const circleWidth = parseInt(getComputedStyle(playerVideoCircle).width);
    const offsetX = e.offsetX;
    const newSize = offsetX + circleWidth / 2;
    const newTime = (newSize * video.duration) / barSize;
    video.currentTime = newTime;
  }

  function updateTime() {
    let redBar = video.currentTime / video.duration;
    progressBar.style.width = `${redBar * 100}%`

    if (video.ended) {
      video.currentTime = 0;
    }
  }

  playerPlayback.addEventListener("click", handleDuration);
  video.addEventListener("timeupdate", updateTime);


})();;(function () {
function getBlockByAlias(alias){
  return $(".reviews__item").filter((index, item) => {
    return $(item).attr("data-linked-with") == alias
  });
}

$(".interactive-avatar__link").on("click", e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-open");
  const itemToShow = getBlockByAlias(target);
  const currentItem = $this.closest(".interactive-avatar");

  itemToShow.addClass("active").siblings().removeClass("active")
  currentItem.addClass("active").siblings().removeClass("active")
})
})();;let bxSliderOptions;
if (window.innerWidth >= 768) {
  bxSliderOptions = {
  pager: false,
  controls: false,
  touchEnabled: false
}} else {
  bxSliderOptions = {
  pager: false,
  controls: false,
}}
  
const slider = $('.slider__list').bxSlider(bxSliderOptions);

$(".slider__arrow--type--prev").click(e => {
  e.preventDefault();
  slider.goToPrevSlide();
});

$(".slider__arrow--type--next").click(e => {
  e.preventDefault();
  slider.goToNextSlide();
});;(function () {
const employeeListDesk = $(".team__name", ".team__list--desktop");

const employeeListMobile = $(".team__name", ".team__list--mobile");

function hideAccordeon(employeeList){
  employeeList.each((index, employee) => {
    let descElem = $(employee).next();
    descElem.height(0);
    descElem.removeClass("active");
    $(employee).removeClass("team__name--active");
  });
}

function showAccordeon(descWrapElem, nameElem){
  let descElem = descWrapElem.find('.team__desc');
  let height = descElem.css('height');
  descWrapElem.height(height);
  nameElem.addClass("team__name--active")
  descWrapElem.addClass("active");
}

function isDesktop(elem) {
  return elem.closest(".team__list--desktop").length == 1;
};

$(".team__name").on("click", function (){
  let currentName = $(this);
  let desc = currentName.next();

  if (desc.hasClass("active")) {
    if (isDesktop(currentName)){
      hideAccordeon(employeeListDesk);
    } else {
      hideAccordeon(employeeListMobile);
    }
  } else {
    if (isDesktop(currentName)){
      hideAccordeon(employeeListDesk)
    } else {
      hideAccordeon(employeeListMobile)
    }
    showAccordeon(desc, currentName)
  }

});
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
