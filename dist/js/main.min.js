(function () {
const items = document.querySelectorAll(".colors__link");

items.forEach(item => {
  item.addEventListener("click", function(e) {
    e.preventDefault();
    const item = this.closest(".colors__item");
    const container = this.closest(".colors__list");
    const isItemOpened = item.classList.contains("active");
    
    if (isItemOpened) {
      closeAllItems(container);
    } else {
      closeAllItems(container);
      openItem(item);
    }
  })
});

function openItem(item){
  const hiddenDesc = item.querySelector(".colors__desc");
  const textDesc = item.querySelector(".colors__desc-text")
  const width = getWidth(item);
  item.classList.add("active");
  hiddenDesc.style.width = `${width.container}px`;
  textDesc.style.width = `${width.textContainer}px`;
}


function closeAllItems(container) {
  const items = container.querySelectorAll(".colors__item")
  const contentList = container.querySelectorAll(".colors__desc")

  items.forEach(element => {
    element.classList.remove("active")
  });

  contentList.forEach(element => {
    element.style.width = "0px"
  });

}

function getWidth(item) {
  let itemWidth = 0
  const screenWidth = window.innerWidth;
  const container = item.closest(".colors__list");
  const titlesBlocks = container.querySelectorAll(".colors__link");
  const titlesWidth = titlesBlocks[0].offsetWidth * titlesBlocks.length;
  const textContainer = item.querySelector(".colors__desc-text");
  const paddingLeft = parseInt(window.getComputedStyle(textContainer, null).paddingLeft);
  const paddingRight = parseInt(window.getComputedStyle(textContainer, null).paddingRight);

  const isMobile = window.matchMedia("(max-width: 768px)").matches;
  
  if(isMobile) {
    itemWidth = screenWidth - titlesWidth
  } else {
    itemWidth = 500
  }

  return {
    container: itemWidth,
    textContainer: itemWidth - paddingLeft - paddingRight
  }
}
})();;(function () {
  const form = document.querySelector(".form");
  const send = document.querySelector(".form__submit");

  send.addEventListener("click", e => {
    e.preventDefault();
    if (validateForm(form)) {
      console.log("sending to server");
    } else {
      console.log("not sending")
    }
  });

  function validateForm(form) {
    let valid = true;

    if (!validateForm(form.element.name)){
      valid = false;
    }
  }

  function validate(element){
    if (!element.checkValidity()){
      element.nextElementSibling.textContent = element.validationMessage;
      element.style.border = "1px solid red";
      return false;
    } else {
      element.nextElementSibling.textContent = "";
      element.style.border = none;
    }
  }
})();;(function () {
const openBtn = $(".burger");
const closeBtn = $(".fullscreen-menu__close-btn")
const fullScreenMenu = $(".fullscreen-menu");
const menuLink = $(".menu--vertical").find(".menu__item");

openBtn.click(e => {
  fullScreenMenu.css("display", "flex");
  $("body").addClass("body--scroll--lock");
});

closeBtn.click(e => {
  fullScreenMenu.css("display", "none");
  $("body").removeClass("body--scroll--lock");
});

menuLink.click(e => {
  e.preventDefault();
  fullScreenMenu.css("display", "none");
  $("body").removeClass("body--scroll--lock");
  
});
})();;(function () {
let myMap;

function init() {
  myMap = new ymaps.Map("map", {
    center: [55.76, 37.64],
    zoom: 11,
    controls: [

    ]
  });

  const coords = [
    [55.737805, 37.591579],
    [55.720057, 37.630307],
    [55.759343, 37.640231]
  ];

  const myCollection = new ymaps.GeoObjectCollection({}, {
    draggable: true,
    iconLayout: 'default#image',
    iconImageHref: "./img/icons/marker.svg",
    iconImageSize: [50, 73],
    iconImageOffset: []
  });

  coords.forEach(coord => {
    myCollection.add(new ymaps.Placemark(coord));
  })

  myMap.geoObjects.add(myCollection);
  myMap.behaviors.disable("scrollZoom")
}

ymaps.ready(init)

})();;(function () {
function validateForm(form, fieldsArray){
  fieldsArray.forEach(field => {
    field.removeClass("input-error");
    if (field.val().trim() == "") {
      field.addClass("input-error");
    }
  })

  const errorFields = form.find(".input-error");

  return errorFields.length == 0
}


$('.form').submit(e => {
  e.preventDefault();

  const form = $(e.currentTarget);
  const name = form.find("[name='name']");
  const phone = form.find("[name='phone']");
  const comment = form.find("[name='comment']");
  const to = form.find("[name='to']");

  const modal = $(".modal");
  const modalText = modal.find(".modal__text");
  modalText.removeClass('modal__text--error')

  const isValid = validateForm(form, [name, phone, comment, to])

  if (isValid) {
    const request = $.ajax({
      url: "https://webdev-api.loftschool.com/sendmail",
      method: 'post',
      data: {
        name: name.val(),
        phone: phone.val(),
        comment: comment.val(),
        to: to.val(),
      },
    });

    request.done(data => {
      modalText.text(data.message)
    });
    
    request.fail(data => {
      const message = data.responseJSON.message
      modalText.text(message)
      modalText.addClass('modal__text--error')  
    })

    request.always(() => {
      $.fancybox.open({
        src: '#modal',
        type: 'inline'
      })
    })
  }
});


$('.js-modal-button').click(e => {
  e.preventDefault();

  $.fancybox.close();
})
})();;(function () {
const sections = $("section");
const display = $(".maincontent");
const sidemenu = $(".fixed-menu");
const sidemenuItems = sidemenu.find(".fixed-menu__item")
const mobileDetect = new MobileDetect(window.navigator.userAgent);
const isMobile = mobileDetect.mobile();


let inScroll = false;

sections.first().addClass("active");

function countSectionPosition(sectionEq) {
  const position = sectionEq * -100;

  if (isNaN(position)) {
    console.erro("not a number")
    return 0
  }
  return position
}

function changeSidemenuColor(sectionEq) {
  const currentSection = sections.eq(sectionEq);
  const sidemenuColor = currentSection.attr("data-sidemenu-color");

  if (sidemenuColor == "white") {
    sidemenu.addClass("fixed-menu--color--white")
  } else {
    sidemenu.removeClass("fixed-menu--color--white")
  }
}

function resetActiveClassForItem(items, itemEq, activeClass) {
  items.eq(itemEq).addClass(activeClass).siblings().removeClass(activeClass);
}

function performTransition(sectionEq) {
  if (inScroll) return
  const transitionOver = 600;
  const mouseInertionOver = 300;
  inScroll = true;

  const position = countSectionPosition(sectionEq);

  changeSidemenuColor(sectionEq);

  display.css({
    transform: `translateY(${position}%)`
  })

  resetActiveClassForItem(sections, sectionEq, "active")
  
  setTimeout(() => {
    inScroll = false;

    resetActiveClassForItem(sidemenuItems, sectionEq, "fixed-menu__item--active");

  }, transitionOver + mouseInertionOver);
}

function viewportScroller() {
  const activeSection = sections.filter(".active");
  const nextSection = activeSection.next();
  const prevSection = activeSection.prev();

  return {
    next() {
      if (nextSection.length) {
        performTransition(nextSection.index())
      }
    },

    prev() {
      if (prevSection.length) {
      performTransition(prevSection.index())
      }
    }
  }
}

$(window).on("wheel", e => {
  const deltaY = e.originalEvent.deltaY;
  const scroller = viewportScroller();

  if (deltaY > 0) {
    scroller.next()
  }
  
  if (deltaY < 0) {
    scroller.prev()
  }
})

$(window).on("keydown", e => {
  const tagName = e.target.tagName.toLowerCase();
  const userTypingInInputs = tagName == "input" && tagName == "textarea";
  const scroller = viewportScroller();

  if (userTypingInInputs) return

  switch(e.keyCode) {
    case 38: //prev
      scroller.prev();
      break;

    case 40: //next
      scroller.next();
      break;
    }
})

$("[data-scroll-to]").click(e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-scroll-to");
  const reqSection = $(`[data-section-id=${target}]`);

  performTransition(reqSection.index());
})


if (isMobile) {
  $("body").swipe( {
    //Generic swipe handler for all directions
    swipe: function(event, direction) {
      const scroller = viewportScroller();
      let scrollDirection = "";
  
      if (direction == "up") scrollDirection = "next";
      if (direction == "down") scrollDirection = "prev";
  
      scroller[scrollDirection]();
    }
  });
  
  $(".wrapper").on("touchmove", e => e.preventDefault());

}
})();;let player;
const playerContainer = document.querySelector(".player")

function eventsInit() {
  document.querySelector(".player__start").addEventListener("click", e => {
    e.preventDefault();
    
    if (playerContainer.classList.contains("paused")) {
      player.pauseVideo()
    } else {
      player.playVideo()
    }
  });

  document.querySelector(".player__playback").addEventListener("click", e => {
    const bar = e.currentTarget;
    const clickedPosition = e.layerX;

    const newButtonPositionPercent = (clickedPosition / bar.offsetWidth) * 100;
    const newPlaybackPositionSec = (player.getDuration() / 100) * newButtonPositionPercent;
    document.querySelector(".player__playback-button").style.left = `${newButtonPositionPercent}%`

    player.seekTo(newPlaybackPositionSec)
  })

}

function onPlayerReady() {
  let interval;
  const durationSec = player.getDuration();
  document.querySelector(".player__duration-estimate").innerHTML = formatTime(durationSec)

  if (typeof interval != 'undefined') {
    clearInterval(interval);
  }

  interval = setInterval(() => {
    const completedSec = player.getCurrentTime();
    const completedPercents = (completedSec / durationSec) * 100;
    document.querySelector(".player__playback-button").style.left = `${completedPercents}%`

    document.querySelector(".player__duration-completed").innerHTML = formatTime(completedSec)
  }, 1000);
}

function formatTime(timeSec) {
  const roundTime = Math.round(timeSec);
  const minutes = addZero(Math.floor(roundTime / 60));
  const seconds = addZero(roundTime - minutes * 60);

  function addZero(num) {
    return num < 10 ? `0${num}`: num;
  }

  return `${minutes}:${seconds}`
}

function onPlayerStateChange(event) {
  /*
  -1 (воспроизведение видео не начато)
  0 (воспроизведение видео завершено)
  1 (воспроизведение)
  2 (пауза)
  3 (буферизация)
  5 (видео подают реплики).
 */
  switch (event.data){
    case 1:
      playerContainer.classList.add("active")
      playerContainer.classList.add("paused")
      
      break;
      
      case 2:
        playerContainer.classList.remove("active")
        playerContainer.classList.remove("paused")
      break;
  }
}


function onYouTubeIframeAPIReady() {
  player = new YT.Player('yt-player', {
    height: '390',
    width: '660',
    videoId: 'l6yOamCT5BQ',
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    },
    playerVars: {
      controls: 0,
      disablekb: 0,
      showinfo: 0,
      rel: 0,
      autoplay: 0,
      modestbranding: 0
    }
  });
}
eventsInit();
;(function () {
function getBlockByAlias(alias){
  return $(".reviews__item").filter((index, item) => {
    return $(item).attr("data-linked-with") == alias
  });
}

$(".interactive-avatar__link").on("click", e => {
  e.preventDefault();

  const $this = $(e.currentTarget);
  const target = $this.attr("data-open");
  const itemToShow = getBlockByAlias(target);
  const currentItem = $this.closest(".interactive-avatar");

  itemToShow.addClass("active").siblings().removeClass("active")
  currentItem.addClass("active").siblings().removeClass("active")
})
})();;const slider = $('.slider__list').bxSlider({
  pager: false,
  controls: false
});

$(".slider__arrow--type--prev").click(e => {
  e.preventDefault();
  slider.goToPrevSlide();
});

$(".slider__arrow--type--next").click(e => {
  e.preventDefault();
  slider.goToNextSlide();
});;(function () {
const employeeListDesk = $(".team__name", ".team__list--desktop");

const employeeListMobile = $(".team__name", ".team__list--mobile");

function hideAccordeon(employeeList){
  employeeList.each((index, employee) => {
    let descElem = $(employee).next();
    descElem.height(0);
    descElem.removeClass("active");
    $(employee).removeClass("team__name--active");
  });
}

function showAccordeon(descWrapElem, nameElem){
  let descElem = descWrapElem.find('.team__desc');
  let height = descElem.css('height');
  descWrapElem.height(height);
  nameElem.addClass("team__name--active")
  descWrapElem.addClass("active");
}

function isDesktop(elem) {
  return elem.closest(".team__list--desktop").length == 1;
};

$(".team__name").on("click", function (){
  let currentName = $(this);
  let desc = currentName.next();

  if (desc.hasClass("active")) {
    if (isDesktop(currentName)){
      hideAccordeon(employeeListDesk);
    } else {
      hideAccordeon(employeeListMobile);
    }
  } else {
    if (isDesktop(currentName)){
      hideAccordeon(employeeListDesk)
    } else {
      hideAccordeon(employeeListMobile)
    }
    showAccordeon(desc, currentName)
  }

});
})();

//# sourceMappingURL=data:application/json;charset=utf8;base64,
