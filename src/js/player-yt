let player;
const playerContainer = document.querySelector(".player")
const playerSplash = $(".player__splash");
const startBtn = $(".player__start");

function eventsInit() {
  document.querySelector(".player__start").addEventListener("click", e => {
    e.preventDefault();
    
    if (playerContainer.classList.contains("paused")) {
      player.pauseVideo()
    } else {
      player.playVideo()
    }
  });

  document.querySelector(".player__playback").addEventListener("click", e => {
    const bar = e.currentTarget;
    const clickedPosition = e.layerX;

    const newButtonPositionPercent = (clickedPosition / bar.offsetWidth) * 100;
    const newPlaybackPositionSec = (player.getDuration() / 100) * newButtonPositionPercent;
    document.querySelector(".player__playback-button").style.left = `${newButtonPositionPercent}%`

    player.seekTo(newPlaybackPositionSec)
  })

  playerSplash.click(e => {
    player.playVideo();
  })

}

function onPlayerReady() {
  let interval;
  const durationSec = player.getDuration();
  document.querySelector(".player__duration-estimate").innerHTML = formatTime(durationSec)

  if (typeof interval != 'undefined') {
    clearInterval(interval);
  }

  interval = setInterval(() => {
    const completedSec = player.getCurrentTime();
    const completedPercents = (completedSec / durationSec) * 100;
    document.querySelector(".player__playback-button").style.left = `${completedPercents}%`

    document.querySelector(".player__duration-completed").innerHTML = formatTime(completedSec)
  }, 1000);
}

function formatTime(timeSec) {
  const roundTime = Math.round(timeSec);
  const minutes = addZero(Math.floor(roundTime / 60));
  const seconds = addZero(roundTime - minutes * 60);

  function addZero(num) {
    return num < 10 ? `0${num}`: num;
  }

  return `${minutes}:${seconds}`
}

function onPlayerStateChange(event) {
  /*
  -1 (воспроизведение видео не начато)
  0 (воспроизведение видео завершено)
  1 (воспроизведение)
  2 (пауза)
  3 (буферизация)
  5 (видео подают реплики).
 */
  switch (event.data){
    case 1:
      playerContainer.classList.add("active");
      playerContainer.classList.add("paused");
      playerSplash.css({display: "none"});
      startBtn.addClass("pause")
      break;
      
      case 2:
        playerContainer.classList.remove("active")
        playerContainer.classList.remove("paused")
        playerSplash.css({display: "block"});
        startBtn.removeClass("pause")
      break;
  }
}


function onYouTubeIframeAPIReady() {
  player = new YT.Player('yt-player', {
    height: '390',
    width: '660',
    videoId: 'l6yOamCT5BQ',
    events: {
      'onReady': onPlayerReady,
      'onStateChange': onPlayerStateChange
    },
    playerVars: {
      controls: 0,
      disablekb: 0,
      showinfo: 0,
      rel: 0,
      autoplay: 0,
      modestbranding: 0
    }
  });
}
eventsInit();
